{"version":3,"sources":["components/Filter.js","components/App.js","serviceWorker.js","index.js"],"names":["Filter","state","lastIndex","items","orderBy","orderAsc","sort","bind","fetch","then","response","json","result","data","map","item","id","setState","col","ascending","this","sortCol","a","b","className","length","onClick","key","date","parse","format","cases","NewCases","deaths","NewDeaths","Component","App","Main","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TA2GeA,E,kDAtGX,aAAc,IAAD,8BACT,gBAIKC,MAAQ,CACTC,UAAY,EACZC,MAAQ,GACRC,QAAS,OACTC,UAAU,GAEd,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBAXH,E,gEAeO,IAAD,OAEfC,MAAM,eACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAAOD,EAAOE,KAAI,SAAAC,GAGpB,OAFAA,EAAKC,GAAK,EAAKf,MAAMC,UACrB,EAAKe,SAAS,CAAEf,UAAW,EAAKD,MAAMC,UAAY,IAC3Ca,KAGX,EAAKE,SAAS,CACVd,MAAQU,S,2BAKnBK,GAED,IAAMC,GAAaC,KAAKnB,MAAMI,SACde,KAAKnB,MAAMG,UAEXc,EACZE,KAAKH,SAAS,CACVZ,SAAWc,EACXf,QAAUc,IAIdE,KAAKH,SAAS,CACVb,QAAUc,EACVb,UAAW,M,+BAMd,IAAD,OAEEQ,EAAOO,KAAKnB,MAAME,MAClBgB,EAAYC,KAAKnB,MAAMI,SACvBgB,EAAUD,KAAKnB,MAAMG,QAQ3B,OANAS,EAAKP,MAAK,SAACgB,EAAEC,GACL,OAAID,EAAED,GAAWE,EAAEF,GACPF,EAAU,GAAG,EAEjBA,GAAW,EAAE,KAGzB,yBAAKK,UAAU,aACX,6BAAMX,EAAKY,OAAX,IAAoBJ,EAApB,IAA8BF,EAAU,OAAO,SAC/C,2BAAOK,UAAU,SACb,+BACI,4BACI,wBAAIE,QAAS,kBAAK,EAAKpB,KAAK,UAA5B,QACA,qCACA,wBAAIoB,QAAS,kBAAK,EAAKpB,KAAK,WAA5B,SACA,wBAAIoB,QAAS,kBAAK,EAAKpB,KAAK,cAA5B,aACA,wBAAIoB,QAAS,kBAAK,EAAKpB,KAAK,YAA5B,UACA,wBAAIoB,QAAS,kBAAK,EAAKpB,KAAK,eAA5B,gBAGR,+BACKO,EAAKC,KAAI,SAACC,EAAKY,GAAN,OACN,wBAAIA,IAAKA,GACL,4BACA,kBAAC,IAAD,CACZC,KAAMb,EAAKa,KACXC,MAAM,mBACNC,OAAO,gBAGK,4BAAKf,EAAKd,OACV,4BAAKc,EAAKgB,OACV,4BAAKhB,EAAKiB,UACV,4BAAKjB,EAAKkB,QACV,4BAAKlB,EAAKmB,sB,GA9FrBC,aCgBNC,E,uKAVX,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,kBACX,kBAAC,EAAD,Y,GAPMW,aAgBZE,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,OCZnByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCNNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c2e71a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Moment from 'react-moment';\n\nclass Filter extends Component {\n\n    constructor(){\n        super();\n        //const parsedQ = ParsedQuery()\n        //parsedQ.parse(location.search);\n        //console.log();\n        this.state = {\n            lastIndex : 1,\n            items : [],\n            orderBy: 'date',\n            orderAsc: true\n        };\n        this.sort = this.sort.bind(this);\n\n    }\n\n    componentDidMount(){\n        \n        fetch('./data.json')\n            .then(response => response.json())\n            .then(result => {\n                const data = result.map(item => {\n                    item.id = this.state.lastIndex;\n                    this.setState({ lastIndex: this.state.lastIndex + 1 });\n                    return item;\n                });\n                \n                this.setState({\n                    items : data\n                });\n            });\n    }\n\n    sort(col){\n\n        const ascending = !this.state.orderAsc;\n        const orderBy = this.state.orderBy;\n\n        if( orderBy === col ){\n            this.setState({ \n                orderAsc : ascending,\n                orderBy : col\n            });\n        }\n        else {\n            this.setState({\n                orderBy : col,\n                orderAsc : true\n            })\n        }\n\n    }\n\n    render(){\n\n        const data = this.state.items;\n        const ascending = this.state.orderAsc;\n        const sortCol = this.state.orderBy;\n\n        data.sort((a,b) => {\n                if( a[sortCol] < b[sortCol] ){\n                    return (ascending?1:-1);\n                }\n                return (ascending?-1:1);\n        });\n        return (\n            <div className=\"container\">\n                <div>{data.length} {sortCol} {ascending?\" asc\":\" desc\"}</div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th onClick={()=> this.sort('date')}>Date</th>\n                            <th>State</th>\n                            <th onClick={()=> this.sort('cases')}>Cases</th>\n                            <th onClick={()=> this.sort('NewCases')}>New Cases</th>\n                            <th onClick={()=> this.sort('deaths')}>Deaths</th>\n                            <th onClick={()=> this.sort('NewDeaths')}>New Deaths</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((item,key) => (\n                            <tr key={key}>\n                                <td>\n                                <Moment\n                    date={item.date}\n                    parse=\"YYYY/MM/DD hh:mm\"\n                    format=\"YYYY.MM.DD\" />\n                  \n                                </td>\n                                <td>{item.state}</td>\n                                <td>{item.cases}</td>\n                                <td>{item.NewCases}</td>\n                                <td>{item.deaths}</td>\n                                <td>{item.NewDeaths}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Filter;","import React, { Component } from 'react';\nimport {Switch, Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Filter from './Filter'\n\nclass App extends Component {\n\n  render(){\n        \n    return (\n      <div className=\"App\">\n        <div className=\"container pt-3\">\n            <Main />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst Main = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={Filter}></Route>\n    </Switch>\n  </BrowserRouter>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n//import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}